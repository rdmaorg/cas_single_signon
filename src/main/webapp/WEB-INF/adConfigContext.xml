<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to Jasig under one or more contributor license agreements. 
	See the NOTICE file distributed with this work for additional information 
	regarding copyright ownership. Jasig licenses this file to you under the 
	Apache License, Version 2.0 (the "License"); you may not use this file except 
	in compliance with the License. You may obtain a copy of the License at the 
	following location: http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<!-- | deployerConfigContext.xml centralizes into one file some of the declarative 
	configuration that | all CAS deployers will need to modify. | | This file 
	declares some of the Spring-managed JavaBeans that make up a CAS deployment. 
	| The beans declared in this file are instantiated at context initialization 
	time by the Spring | ContextLoaderListener declared in web.xml. It finds 
	this file because this | file is among those declared in the context parameter 
	"contextConfigLocation". | | By far the most common change you will need 
	to make in this file is to change the last bean | declaration to replace 
	the default authentication handler with | one implementing your approach 
	for authenticating usernames and passwords. + -->

<!-- | | This file is created by Farrukh Mirza | -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd

       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- https://apereo.github.io/cas/4.0.x/installation/LDAP-Authentication.html -->

	<!-- | Change principalIdAttribute to use another directory attribute, | 
		e.g. userPrincipalName, for the NetID -->

	<!-- Having p:principalIdAttribute="sAMAccountName" is causing problems -->
	<!-- bean id="adAuthenticationHandler" class="org.jasig.cas.authentication.LdapAuthenticationHandler" 
		p:principalIdAttribute="sAMAccountName" c:authenticator-ref="authenticator"> 
		<property name="principalAttributeMap"> <map> <entry key="sAMAccountName" 
		value="sAMAccountName" /> <entry key="dc" value="dc" /> <entry key="ou" value="ou" 
		/> <entry key="cn" value="cn" /> <entry key="sn" value="sn" /> <entry key="givenName" 
		value="givenName" /> <entry key="mail" value="mail" /> <entry key="memberOf" 
		value="memberOf" /> </map> </property> </bean -->
	<bean id="adAuthenticationHandler" class="org.jasig.cas.authentication.LdapAuthenticationHandler"
		c:authenticator-ref="adAuthenticator">
		<property name="principalAttributeMap">
			<map>
				<!-- | This map provides a simple attribute resolution mechanism. | Keys 
					are LDAP attribute names, values are CAS attribute names. | Use this facility 
					instead of a PrincipalResolver if LDAP is | the only attribute source. -->
				<entry key="sAMAccountName" value="sAMAccountName" />
				<entry key="dc" value="dc" />
				<entry key="ou" value="ou" />
				<entry key="cn" value="cn" />
				<entry key="sn" value="sn" />
				<entry key="givenName" value="givenName" />
				<!-- entry key="displayName" value="displayName" / -->
				<entry key="mail" value="mail" />
				<entry key="memberOf" value="memberOf" />
			</map>
		</property>
	</bean>

	<bean id="adAuthenticator" class="org.ldaptive.auth.Authenticator"
		c:resolver-ref="adDnResolver" c:handler-ref="adAuthHandler"
		p:entryResolver-ref="adEntryResolver" />

	<!-- Active Directory UPN format. -->
	<!-- <bean id="dnResolver" class="org.ldaptive.auth.FormatDnResolver" c:format="%s@${ldap.domain}" 
		/> -->
	<bean id="adDnResolver" class="org.ldaptive.auth.FormatDnResolver"
		c:format="${ad.domain}\%s" />

	<bean id="adAuthHandler" class="org.ldaptive.auth.PooledBindAuthenticationHandler"
		p:connectionFactory-ref="adPooledLdapConnectionFactory" />

	<bean id="adPooledLdapConnectionFactory" class="org.ldaptive.pool.PooledConnectionFactory"
		p:connectionPool-ref="adConnectionPool" />

	<bean id="adConnectionPool" class="org.ldaptive.pool.BlockingConnectionPool"
		init-method="initialize" p:poolConfig-ref="adLdapPoolConfig"
		p:blockWaitTime="${ldap.pool.blockWaitTime}" p:validator-ref="adSearchValidator"
		p:pruneStrategy-ref="adPruneStrategy" p:connectionFactory-ref="adConnectionFactory" />

	<bean id="adLdapPoolConfig" class="org.ldaptive.pool.PoolConfig"
		p:minPoolSize="${ldap.pool.minSize}" p:maxPoolSize="${ldap.pool.maxSize}"
		p:validateOnCheckOut="${ldap.pool.validateOnCheckout}"
		p:validatePeriodically="${ldap.pool.validatePeriodically}"
		p:validatePeriod="${ldap.pool.validatePeriod}" />

	<bean id="adConnectionFactory" class="org.ldaptive.DefaultConnectionFactory"
		p:connectionConfig-ref="adConnectionConfig" />

	<bean id="adConnectionConfig" class="org.ldaptive.ConnectionConfig"
		p:ldapUrl="${ad.url}" p:connectTimeout="${ldap.connectTimeout}"
		p:useStartTLS="${ldap.useStartTLS}" p:sslConfig-ref="sslConfig" />

	<bean id="adSslConfig" class="org.ldaptive.ssl.SslConfig">
		<property name="credentialConfig">
			<bean class="org.ldaptive.ssl.X509CredentialConfig"
				p:trustCertificates="${ldap.trustedCert}" />
		</property>
	</bean>

	<bean id="adPruneStrategy" class="org.ldaptive.pool.IdlePruneStrategy"
		p:prunePeriod="${ldap.pool.prunePeriod}" p:idleTime="${ldap.pool.idleTime}" />

	<bean id="adSearchValidator" class="org.ldaptive.pool.SearchValidator" />

	<bean id="adEntryResolver"
		class="org.jasig.cas.authentication.support.UpnSearchEntryResolver"
		p:baseDn="${ad.searchBase}" />
		
		<!-- Use the following Search Entry Resolver if searchFilter is required -->
	<!-- <bean id="adEntryResolver" class="com.avnet.cs.cas.ad.AcsActiveDirectorySearchEntryResolver" 
		p:searchFilter="${ad.searchFilter}" p:baseDn="${ad.searchBase}" /> -->
</beans>